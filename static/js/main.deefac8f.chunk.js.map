{"version":3,"sources":["IndexPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialAcount","lastname","firstname","employee_number","IndexPage","useCookies","cookies","setCookie","useState","account","myAccount","setMyAccount","URL","url","setUrl","useMemo","now","Date","url_string","queryString","stringifyUrl","query","getFullYear","getMonth","getDate","generate_url","href","target","rel","decodeURIComponent","host","type","defaultValue","onChange","e","value","onClick","values","path","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAKMA,EAAyB,CAC7BC,SAAU,eACVC,UAAW,eACXC,gBAAiB,MA6GJC,EA1Ga,WAAO,IAAD,EACHC,YAAW,CAAC,YADT,mBACzBC,EADyB,KAChBC,EADgB,OAEEC,mBAASF,EAAQG,SAAWT,GAF9B,mBAEzBU,EAFyB,KAEdC,EAFc,OAIVH,mBACpB,IAAII,IACF,wGAN4B,mBAIzBC,EAJyB,KAIpBC,EAJoB,KA0DhC,OAlBAC,mBAAQ,WACN,IAAMC,EAAM,IAAIC,KACVC,EAAaC,IAAYC,aAAa,CAC1CP,IACE,sGACFQ,MAAO,CACL,kBAAmBX,EAAUT,SAAW,IAAMS,EAAUR,UACxD,mBAAoBQ,EAAUP,gBAC9B,uBAAuB,GAAvB,OAA2Ba,EAAIM,eAC/B,wBAAwB,GAAxB,OAA4BN,EAAIO,WAAa,GAC7C,sBAAsB,GAAtB,OAA0BP,EAAIQ,cAI5BC,EAAe,IAAIb,IAAIM,GAC7BJ,EAAOW,KACN,CAACf,EAAUP,gBAAiBO,EAAUR,UAAWQ,EAAUT,WAG5D,oCACE,0DACA,uBAAGyB,KAAMb,EAAIa,KAAMC,OAAO,SAASC,IAAI,uBACpCC,mBAAmBhB,EAAIiB,MACtB,IACApB,EAAUT,SACVS,EAAUR,UACV,IACAQ,EAAUP,iBAEd,8BACE,6CACA,4BACE,iDAEE,2BACE4B,KAAK,OACLC,aAActB,EAAUT,SACxBgC,SAnEsB,SAChCC,GAEAxB,EAAUT,SAAWiC,EAAEP,OAAOQ,MAC9BxB,EAAaD,OAkEP,kDAEE,2BACEqB,KAAK,OACLC,aAActB,EAAUR,UACxB+B,SApEuB,SACjCC,GAEAxB,EAAUR,UAAYgC,EAAEP,OAAOQ,MAC/BxB,EAAaD,OAmEP,gDAEE,2BACEqB,KAAK,OACLC,aAActB,EAAUP,gBACxB8B,SArE4B,SACtCC,GAEAxB,EAAUP,gBAAkB+B,EAAEP,OAAOQ,MACrCxB,EAAaD,QAyCX,OA6BE,uBAAGgB,KAAK,IAAIU,QAnEG,WACnB,IAAMC,EAAS,CACbpC,SAAUS,EAAUT,SACpBC,UAAWQ,EAAUR,UACrBC,gBAAiBO,EAAUP,iBAE7BI,EAAU,UAAW8B,EAAQ,CAAEC,KAAM,OA6DEC,UAAU,mBAA7C,iDC/FOC,MAVf,WACE,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.deefac8f.chunk.js","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport { Account } from \"./Account\";\nimport { useCookies } from \"react-cookie\";\nimport queryString from \"query-string\";\n\nconst initialAcount: Account = {\n  lastname: \"田中\",\n  firstname: \"太郎\",\n  employee_number: 9999,\n};\n\nconst IndexPage: React.FC = () => {\n  const [cookies, setCookie] = useCookies([\"account\"]);\n  const [myAccount, setMyAccount] = useState(cookies.account || initialAcount);\n\n  const [url, setUrl] = useState(\n    new URL(\n      \"https://docs.google.com/forms/d/e/1FAIpQLSe_F8JbKycAN7LK7UjF29eWaz4uLWzmQ09xSX2i7zltWYnWPw/viewform\"\n    )\n  );\n\n  const handleLastNameInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    myAccount.lastname = e.target.value;\n    setMyAccount(myAccount);\n  };\n\n  const handleFirstNameInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    myAccount.firstname = e.target.value;\n    setMyAccount(myAccount);\n  };\n\n  const handleEmployeeNumberInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    myAccount.employee_number = e.target.value;\n    setMyAccount(myAccount);\n  };\n\n  const handleSubmit = () => {\n    const values = {\n      lastname: myAccount.lastname,\n      firstname: myAccount.firstname,\n      employee_number: myAccount.employee_number,\n    };\n    setCookie(\"account\", values, { path: \"/\" });\n  };\n\n  useMemo(() => {\n    const now = new Date();\n    const url_string = queryString.stringifyUrl({\n      url:\n        \"https://docs.google.com/forms/d/e/1FAIpQLSe_F8JbKycAN7LK7UjF29eWaz4uLWzmQ09xSX2i7zltWYnWPw/viewform\",\n      query: {\n        \"entry.257849901\": myAccount.lastname + \" \" + myAccount.firstname,\n        \"entry.1208809069\": myAccount.employee_number,\n        \"entry.235813066_year\": `${now.getFullYear()}`,\n        \"entry.235813066_month\": `${now.getMonth() + 1}`,\n        \"entry.235813066_day\": `${now.getDate()}`,\n      },\n    });\n\n    const generate_url = new URL(url_string);\n    setUrl(generate_url);\n  }, [myAccount.employee_number, myAccount.firstname, myAccount.lastname]);\n\n  return (\n    <>\n      <h2>daily report entrance 2020</h2>\n      <a href={url.href} target=\"_blank\" rel=\"noopener noreferrer\">\n        {decodeURIComponent(url.host) +\n          \"/\" +\n          myAccount.lastname +\n          myAccount.firstname +\n          \"/\" +\n          myAccount.employee_number}\n      </a>\n      <form>\n        <h3>Path Settings</h3>\n        <ul>\n          <li>\n            lastname(姓) :\n            <input\n              type=\"text\"\n              defaultValue={myAccount.lastname}\n              onChange={handleLastNameInputChange}\n            />\n          </li>\n          <li>\n            firstname(名) :\n            <input\n              type=\"text\"\n              defaultValue={myAccount.firstname}\n              onChange={handleFirstNameInputChange}\n            />\n          </li>\n          <li>\n            employee number :\n            <input\n              type=\"text\"\n              defaultValue={myAccount.employee_number}\n              onChange={handleEmployeeNumberInputChange}\n            />\n          </li>\n        </ul>\n         \n        <a href=\"/\" onClick={handleSubmit} className=\"btn btn-primary\">\n          入力内容の保存\n        </a>\n      </form>\n    </>\n  );\n};\n\nexport default IndexPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport IndexPage from \"./IndexPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <IndexPage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}